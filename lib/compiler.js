// Generated by CoffeeScript 1.7.1
var CoffeeScript, indent, precompile, preprocess;

CoffeeScript = require("coffee-script");

preprocess = require("./preprocessor").preprocess;

indent = require("./util").indent;

exports.precompile = precompile = function(source) {
  var script;
  script = CoffeeScript.compile(preprocess(source), {
    noWrap: true
  });
  return "function(__obj) {\n  if (!__obj) __obj = {};\n  if (window.__reactTagCount == null) window.__reactTagCount = 0;\n  var __out = [], __capture = function(callback) {\n    var out = __out, result;\n    __out = [];\n    callback.call(this);\n    result = __out.join('');\n    __out = out;\n    return __safe(result);\n  }, __sanitize = function(value) {\n    if (value && value.ecoSafe) {\n      return value;\n    } else if (typeof value !== 'undefined' && value != null) {\n      return __escape(value);\n    } else {\n      return '';\n    }\n  }, __getReactTagValue = function(tag) {\n    var curr = window.__reactTagCount += 1;\n    var sel = 'react-uniq-' + curr;\n    setTimeout(function() {\n      console.log('Append', sel, tag);\n      jQuery('#' + sel).replaceWith(tag);\n    }, 0);\n    return '<b class=\"react-tmp\" id=\"' + sel + '\"></b>';\n  }, __reactify = function(value, isSafe) {\n    if (!(value instanceof rx.SrcCell)) {\n      return isSafe ? value : __sanitize(value);\n    }\n    return __getReactTagValue(rx.rxt.tags.span(rx.bind(function() {\n      var val = value.get();\n      return isSafe ? rx.rxt.rawHtml(val) : __sanitize(val);\n    })));\n  }, __safe, __objSafe = __obj.safe, __escape = __obj.escape;\n  __safe = __obj.safe = function(value) {\n    if (value && value.ecoSafe) {\n      return value;\n    } else {\n      if (!(typeof value !== 'undefined' && value != null)) value = '';\n      var result = new String(value);\n      result.ecoSafe = true;\n      return result;\n    }\n  };\n  if (!__escape) {\n    __escape = __obj.escape = function(value) {\n      return ('' + value)\n        .replace(/&/g, '&amp;')\n        .replace(/</g, '&lt;')\n        .replace(/>/g, '&gt;')\n        .replace(/\x22/g, '&quot;');\n    };\n  }\n  (function() {\n" + (indent(script, 4)) + "\n  }).call(__obj);\n  __obj.safe = __objSafe, __obj.escape = __escape;\n  return __out.join('');\n}";
};

exports.compile = function(source) {
  return new Function("return " + (precompile(source)))();
};
